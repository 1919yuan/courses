;;; Support for numbers larger than most-positive-fixnum
(require-extension numbers)

(define (square x) (* x x))
(define (divides? a b) (= (remainder b a) 0))
(define (smallest-divisor n)
  (define (next test-divisor)
    (if (= test-divisor 2)
        3
        (+ test-divisor 2)))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (next test-divisor)))))
  (find-divisor n 2))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else (remainder (* base (expmod base (- exp 1) m)) m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) #t)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else #f)))

(define (timed-prime-test n)
  (define (report-prime elapsed-time)
    (display " is a prime number, verification took ")
    (display elapsed-time)
    (display " milliseconds.")
    (newline)
    #t)
  (define (report-non-prime)
    (display " is not a prime number.")
    (newline)
    #f)
  (define (start-prime-test n start-time)
    (if (fast-prime? n (min 10 n))
        (report-prime (- (current-milliseconds) start-time))
        (report-non-prime)))
  (display n)
  (start-prime-test n (current-milliseconds)))

(define (search-for-primes lower upper)
  (if (even? lower)
      (search-for-primes (+ lower 1) upper)
      (if (> lower upper)
          '()
          (if (timed-prime-test lower)
              (cons lower (search-for-primes (+ lower 2) upper))
              (search-for-primes (+ lower 2) upper)))))
