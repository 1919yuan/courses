(define (member? x list)
 (cond ((null? list) #f)
       ((= x (first list)) #t)
       (else (member? x (rest list)))))

(define (setify x)
 (define (loop x c)
  (cond ((null? x) c)
        ((member? (first x) c) (loop (rest x) c))
        (else (loop (rest x) (cons (first x) c)))))
 (loop x '()))

(define (set-union x y)
 (define (loop x y c)
  (cond ((null? x) (append c y))
        ((member? (first x) y) (loop (rest x) y c))
        (else (loop (rest x) y (cons (first x) c)))))
 (loop (setify x) (setify y) '()))

(define (set-intersection x y)
 (define (loop x y c)
  (cond ((null? x) c)
        ((member? (first x) y) (loop (rest x) y (cons (first x) c)))
        (else (loop (rest x) y c))))
 (loop (setify x) (setify y) '()))

(define (set-minus x y)
 (define (loop x y c)
  (cond ((null? x) c)
        ((member? (first x) y) (loop (rest x) y c))
        (else (loop (rest x) y (cons (first x) c)))))
 (loop (setify x) (setify y) '()))
