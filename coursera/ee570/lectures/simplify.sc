(define (simplify-+ e)
 (case (- (length e) 1)
  ((0) 0)
  ((1) (simplify (second e)))
  ((2) (list '+ (simplify (second e)) (simplify (third e))))
  (else (simplify (list '+ (second e) (cons '+ (rest (rest e))))))))

(define (simplify-- e)
 (case (- (length e) 1)
  ((0) (panic "Invalid expression"))
  ((1) (simplify (list '* -1 (second e))))
  ((2) (simplify (list '+ (second e) (list '- (third e)))))
  (else (simplify (list '- (second e) (cons '+ (rest (rest e))))))))

(define (simplify-* e)
 (case (- (length e) 1)
  ((0) 1)
  ((1) (simplify (second e)))
  ((2) (list '* (simplify (second e)) (simplify (third e))))
  (else (simplify (list '* (second e) (cons '* (rest (rest e))))))))

(define (simplify-/ e)
 (case (- (length e) 1)
  ((0) (panic "Invalid expression"))
  ((1) (simplify (list 'expt (second e) -1)))
  ((2) (simplify (list '* (second e) (list '/ (third e)))))
  (else (simplify (list '/ (second e) (cons '* (rest (rest e))))))))

(define (simplify-expt e)
 (if (= (- (length e) 1) 2)
     (list 'expt (simplify (second e)) (simplify (third e)))
     (panic "Invalid expression")))

(define (simplify-sqrt e)
 (if (= (- (length e) 1) 1)
     (simplify (list 'expt (second e) 0.5))
     (panic "Invalid expression")))

(define (simplify e)
 (cond ((number? e) e)
       ((symbol? e) e)
       ((and (list? e) (not (null? e)))
	(case (first e)
	 ((+) (simplify-+ e))
	 ((-) (simplify-- e))
	 ((*) (simplify-* e))
	 ((/) (simplify-/ e))
	 ((expt) (simplify-expt e))
	 ((sqrt) (simplify-sqrt e))
	 (else (panic "Invalid expression"))))
       (else (panic "Invalid expression"))))
