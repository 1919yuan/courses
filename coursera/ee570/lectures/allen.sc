(define (transitive? p q r)
 (cond
  ((eq? p '=) (eq? q r))
  ((eq? q '=) (eq? p r))
  (else
   (memq r
	 (rest
	  (rest (find-if (lambda (entry)
			  (and (eq? p (first entry)) (eq? q (second entry))))
			 *transitivity-table*)))))))

(define (solve-party-by-backtracking)
 (message "Unimplemented")
 (abort))

(define (solve-kautz-by-backtracking)
 (message "Unimplemented")
 (abort))

(define (solve-party-by-constraints)
 (let ((ab (create-domain-variable '(s = si)))
       (bc (create-domain-variable '(f = fi)))
       (bd (create-domain-variable '(= s si f fi o oi d di)))
       (ad (create-domain-variable '(< m mi >)))
       (cd (create-domain-variable '(< m mi >)))
       (ac (create-domain-variable '(= < > m mi o oi s si f fi d di))))
  (attach-after-demon! (lambda () (restrict-relation! 'ab ab)) ab)
  (attach-after-demon! (lambda () (restrict-relation! 'bc bc)) bc)
  (attach-after-demon! (lambda () (restrict-relation! 'bd bd)) bd)
  (attach-after-demon! (lambda () (restrict-relation! 'ad ad)) ad)
  (attach-after-demon! (lambda () (restrict-relation! 'cd cd)) cd)
  (attach-after-demon! (lambda () (restrict-relation! 'ac ac)) ac)
  (assert-constraint! transitive? (list ab bc ac))
  (assert-constraint! transitive? (list ab bd ad))
  (assert-constraint! transitive? (list bc cd bd))
  (assert-constraint! transitive? (list ac cd ad))
  (csp-solution (list ab bc bd ad cd ac) first)))

(define (solve-kautz-by-constraints)
 (let ((ab (create-domain-variable '(d di)))
       (bc (create-domain-variable '(d di)))
       (bd (create-domain-variable '(oi)))
       (ad (create-domain-variable '(si mi)))
       (cd (create-domain-variable '(si mi)))
       (ac (create-domain-variable '(f fi))))
  (attach-after-demon! (lambda () (restrict-relation! 'ab ab)) ab)
  (attach-after-demon! (lambda () (restrict-relation! 'bc bc)) bc)
  (attach-after-demon! (lambda () (restrict-relation! 'bd bd)) bd)
  (attach-after-demon! (lambda () (restrict-relation! 'ad ad)) ad)
  (attach-after-demon! (lambda () (restrict-relation! 'cd cd)) cd)
  (attach-after-demon! (lambda () (restrict-relation! 'ac ac)) ac)
  (assert-constraint! transitive? (list ab bc ac))
  (assert-constraint! transitive? (list ab bd ad))
  (assert-constraint! transitive? (list bc cd bd))
  (assert-constraint! transitive? (list ac cd ad))
  (csp-solution (list ab bc bd ad cd ac) first)))
