(define (a-digit) (an-integer-between 0 9))

(define (a-digit-but digits)
 (let ((digit (a-digit)))
  (when (member digit digits) (fail))
  digit))

(define (send-more-money)
 (let* ((d (a-digit))
	(e (a-digit-but (list d)))
	(y (a-digit-but (list d e))))
  (unless (= (remainder (+ d e) 10) y) (fail))
  (let* ((n (a-digit-but (list d e y)))
	 (r (a-digit-but (list d e y n))))
   (unless (= (remainder (+ (+ (* 10 n) (* 1 d)) (+ (* 10 r) (* 1 e))) 100)
	      (+ (* 10 e) (* 1 y)))
    (fail))
   (let ((o (a-digit-but (list d e y n r))))
    (unless (= (remainder (+ (+ (* 100 e) (* 10 n) (* 1 d))
			     (+ (* 100 o) (* 10 r) (* 1 e)))
			  1000)
	       (+ (* 100 n) (* 10 e) (* 1 y)))
     (fail))
    (let* ((s (a-digit-but (list 0 d e y n r o)))
	   (m (a-digit-but (list 0 d e y n r o s))))
     (unless (= (+ (+ (* 1000 s) (* 100 e) (* 10 n) (* 1 d))
		   (+ (* 1000 m) (* 100 o) (* 10 r) (* 1 e)))
		(+ (* 10000 m) (* 1000 o) (* 100 n) (* 10 e) (* 1 y)))
      (fail))
     (list (list 's s)
	   (list 'e e)
	   (list 'n n)
	   (list 'd d)
	   (list 'm m)
	   (list 'o o)
	   (list 'r r)
	   (list 'y y)))))))
