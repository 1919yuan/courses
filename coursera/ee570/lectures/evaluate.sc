(define (evaluate-+ arguments) (reduce + arguments 0))

(define (evaluate-- arguments)
 (cond ((null? arguments) (panic "- cannot take zero arguments"))
       ((= (length arguments) 1) (- (first arguments)))
       (else (- (first arguments) (reduce + (rest arguments) 0)))))

(define (evaluate-* arguments) (reduce * arguments 1))

(define (evaluate-/ arguments)
 (cond ((null? arguments) (panic "/ cannot take zero arguments"))
       ((= (length arguments) 1) (/ (first arguments)))
       (else (/ (first arguments) (reduce * (rest arguments) 1)))))

(define (evaluate-expt arguments)
 (if (= (length arguments) 2)
     (expt (first arguments) (second arguments))
     (panic "EXPT must take exactly two arguments")))

(define (evaluate-sqrt arguments)
 (if (= (length arguments) 1)
     (sqrt (first arguments))
     (panic "SQRT must take exactly one argument")))

(define (lookup-variable e bindings)
 (cond ((null? bindings) (panic "Unbound variable"))
       ((eq? e (first (first bindings))) (second (first bindings)))
       (else (lookup-variable e (rest bindings)))))

(define (lookup-definition e definitions)
 (cond ((null? definitions) (panic "Invalid expression"))
       ((eq? e (first (second (first definitions)))) (first definitions))
       (else (lookup-definition e (rest definitions)))))

(define (evaluate e bindings definitions)
 (define (evaluate-with-bindings-and-definitions e)
  (evaluate e bindings definitions))
 (cond
  ((number? e) e)
  ((symbol? e) (lookup-variable e bindings))
  ((and (list? e) (not (null? e)))
   (case (first e)
    ((+) (evaluate-+ (map evaluate-with-bindings-and-definitions (rest e))))
    ((-) (evaluate-- (map evaluate-with-bindings-and-definitions (rest e))))
    ((*) (evaluate-* (map evaluate-with-bindings-and-definitions (rest e))))
    ((/) (evaluate-/ (map evaluate-with-bindings-and-definitions (rest e))))
    ((expt)
     (evaluate-expt (map evaluate-with-bindings-and-definitions (rest e))))
    ((sqrt)
     (evaluate-sqrt (map evaluate-with-bindings-and-definitions (rest e))))
    ((if) (if (zero? (evaluate (second e) bindings definitions))
	      (evaluate (fourth e) bindings definitions)
	      (evaluate (third e) bindings definitions)))
    (else (let ((definition (lookup-definition (first e) definitions)))
	   (if (= (length (second definition)) (length e))
	       (evaluate
		(third definition)
		(map (lambda (variable value) (list variable value))
		     (rest (second definition))
		     (map evaluate-with-bindings-and-definitions (rest e)))
		definitions)
	       (panic "Wrong number of arguments"))))))
  (else (panic "Invalid expression"))))

(define (test)
 (evaluate
  '(factorial 5)
  '()
  '((define (factorial n)
     (if n
	 (* n (factorial (- n 1)))
	 1)))))
